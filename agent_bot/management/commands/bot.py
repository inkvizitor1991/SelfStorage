import logging
import time
import telegram
import qrcode

import phonenumbers
from phonenumbers import NumberParseException

from collections import defaultdict
from django.core.management.base import BaseCommand
from django.conf import settings

from telegram import ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

STORAGE, CATEGORY, THINGS, QUANTITY, PERIOD, CHECK_PERIOD, INITIALS, PASPORT, BIRTH, ORDER, CHECKOUT = range(
    11)

storage_info = defaultdict()

CHECKOUT_URL = 'https://www.tinkoff.ru/kassa/solution/qr/'

TG_TOKEN = settings.BOT_TOKEN

bot = telegram.Bot(token=TG_TOKEN)

address_kb = [
    ['–ü–∏—Ä–æ–≥–æ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è 15 (–º.–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞)'],
    ['–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 25, –∫–æ—Ä–ø. 1–í (–º.–ó–≤–µ–∑–¥–Ω–∞—è)'],
    ['—É–ª. –ö—Ä—ã–ª–µ–Ω–∫–æ, 3–ë ( –º. –£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ )'],
    ['–ú—É—Ä–∏–Ω–æ, –í–æ—Ä–æ–Ω—Ü–æ–≤—Å–∫–∏–π –±-—Ä, 3 ( –º. –î–µ–≤—è—Ç–∫–∏–Ω–æ )'],
]
choosing_category_kb = [['—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏', '–¥—Ä—É–≥–æ–µ']]

seasonal_things_kb = [
    ['–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥'],
    ['–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–∫–æ–ª–µ—Å–∞']
]
storage_period_kb = [
    ['–Ω–µ–¥–µ–ª—è', '–º–µ—Å—è—Ü', '–ø–æ–ª –≥–æ–¥–∞'],
    ['–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ª –≥–æ–¥–∞']
]
more_storage_period_kb = [
    ['2 –º–µ—Å—è—Ü–∞', '3 –º–µ—Å—è—Ü–∞'],
    ['4 –º–µ—Å—è—Ü–∞', '5 –º–µ—Å—è—Ü–µ–≤'],
    ['–Ω–∞–∑–∞–¥']
]
tires_storage_period_kb = [
    ['–º–µ—Å—è—Ü', '–ø–æ–ª –≥–æ–¥–∞'],
    ['–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ª –≥–æ–¥–∞']
]
byu_or_menu_kb = [['–û–ø–ª–∞—Ç–∏—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

address = ReplyKeyboardMarkup(
    address_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)

choosing_category = ReplyKeyboardMarkup(
    choosing_category_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
seasonal_things = ReplyKeyboardMarkup(
    seasonal_things_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
storage_period = ReplyKeyboardMarkup(
    storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
more_storage_period = ReplyKeyboardMarkup(
    more_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)

tires_storage_period = ReplyKeyboardMarkup(
    tires_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)

byu_or_menu = ReplyKeyboardMarkup(
    byu_or_menu_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)


def get_user_data_from_db():
    return False


def is_valid_fio(fio):
    return True


def is_valid_phone(phonenumber):
        try:
            number = phonenumbers.parse(phonenumber, 'RU')
            if phonenumbers.is_valid_number(number):
                phone = phonenumbers.format_number(
                    number,
                    phonenumbers.PhoneNumberFormat.E164
                )
                return True
        except NumberParseException:
            return False


def is_valid_passport(passport):
    return True


def is_valid_birth_date(birth_date):
    return True


def get_qr_code(chat_id):
    img = qrcode.make(chat_id)
    img.save(f'{chat_id}.png')
    return f'{chat_id}.png'


def start(update, context):
    time.sleep(0.5)
    message = update.message
    user_name = message.chat.first_name
    text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n' \
           '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.' \
           '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π!'
    update.message.reply_text(text)
    time.sleep(1)
    reply_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.'
    update.message.reply_text(reply_text, reply_markup=address)
    time.sleep(0.2)
    return STORAGE


def get_storage(update, context):
    message = update.message
    user_id = message.chat_id
    storage_info[user_id] = {}
    address = message.text
    storage_info[user_id]['address'] = address
    reply_text = '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?'
    update.message.reply_text(reply_text, reply_markup=choosing_category)
    return CATEGORY


def choose_category(update, context):
    message = update.message
    user_id = message.chat_id

    storage_type = message.text
    storage_info[user_id]['storage_type'] = storage_type
    if storage_type == '–¥—Ä—É–≥–æ–µ':
        print('–æ–∫')
    if storage_type == '—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ –≤–µ—â–∏.'
        update.message.reply_text(reply_text, reply_markup=seasonal_things)
        return THINGS


def get_things(update, context):
    message = update.message
    user_id = message.chat_id
    things = message.text
    storage_info[user_id]['things'] = things
    update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ.')
    return QUANTITY


def get_quantity(update, context):
    message = update.message
    user_id = message.chat_id
    cell_size = message.text
    if cell_size.isdigit() and int(cell_size) < 100:
        context.user_data['quantity'] = cell_size
        update.message.reply_text('–°—Ç–æ–∏–º–æ—Å—Ç—å: 10000 –∑–∞ –º–µ—Å—è—Ü')
        storage_info[user_id]['cell_size'] = cell_size
        time.sleep(0.3)
        things = storage_info[user_id].get('things')
        if things in ('–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥'):
            reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
            update.message.reply_text(reply_text, reply_markup=storage_period)
            return PERIOD
        if things == '–∫–æ–ª–µ—Å–∞':
            reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
            update.message.reply_text(
                reply_text,
                reply_markup=tires_storage_period
            )
            return PERIOD

    else:
        update.message.reply_text('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.')


def get_storage_period(update, context):
    message = update.message
    user_id = message.chat_id

    storage_period = message.text
    if storage_period == '–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–æ –º–µ–Ω—å—à–µ –ø–æ–ª –≥–æ–¥–∞':
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ.', reply_markup=more_storage_period)
        return CHECK_PERIOD
    else:
        storage_info[user_id]['storage_period'] = storage_period
        user_info = get_user_data_from_db()
        ####–ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–¥ —Å—Ä–∞–∑—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        if not user_info:
            update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            )
            return INITIALS


def check_storage_period(update, context):
    message = update.message
    user_id = message.chat_id
    user_message = message.text
    things = storage_info[user_id].get('things')

    if things in ('–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥') and user_message == '–Ω–∞–∑–∞–¥':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
        update.message.reply_text(reply_text, reply_markup=storage_period)
        return PERIOD
    if things == '–∫–æ–ª–µ—Å–∞' and user_message == '–Ω–∞–∑–∞–¥':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
        update.message.reply_text(
            reply_text,
            reply_markup=tires_storage_period
        )
        return PERIOD
    else:
        storage_info[user_id]['storage_period'] = user_message
        user_info = get_user_data_from_db()
        ####–ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–∞–∑—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        if not user_info:
            update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            )
            return INITIALS
        return ORDER


def get_initials(update, context):
    user_message = update.message.text
    message = update.message
    fio = message.text
    if is_valid_fio(user_message):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000'
        )
        storage_info[message.chat_id]['fio'] = fio
        return PASPORT
    else:
        update.message.reply_text(
            '–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        )


def get_user_passport_from_bot(update, context):
    message = update.message
    phone = message.text
    if is_valid_phone(phone):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞–µ—Ç–µ –°–ï–†–ò–Ø –ù–û–ú–ï–†\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 8805 777666',
        )
        storage_info[message.chat_id]['phone'] = phone
        return BIRTH
    else:
        update.message.reply_text(
            '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000 ',
        )


def get_user_birth_date_from_bot(update, context):
    message = update.message
    passport = message.text
    if is_valid_passport(passport):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
        )
        storage_info[message.chat_id]['passport'] = passport
        return ORDER
    else:
        update.message.reply_text(
            '–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –°–ï–†–ò–Ø –ù–û–ú–ï–†',
        )


def create_order(update, context):
    message = update.message
    birth_date = message.text
    user_id = message.chat_id
    storage_type = storage_info[user_id]['storage_type']
    address = storage_info[user_id]['address']
    things = storage_info[user_id]['things']
    period = storage_info[user_id]['storage_period']
    fio = storage_info[message.chat_id]['fio']
    passport = storage_info[message.chat_id]['passport']
    phone = storage_info[message.chat_id]['phone']
    if is_valid_birth_date(birth_date):
        update.message.reply_text(
            f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {fio}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {passport},\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone},\n–ê–¥—Ä–µ—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è: {address},\n–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: {storage_type},\n–í–µ—â—å: {things},\n–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {period}',
            reply_markup=byu_or_menu
        )
        return CHECKOUT
    else:
        update.message.reply_text(
            '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 1991-08-17',
        )


def checkout(update, context):
    message = update.message
    choice = message.text
    if choice == '–û–ø–ª–∞—Ç–∏—Ç—å':
        update.message.reply_text(
            f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {CHECKOUT_URL}'
        )
        qr_code_path = get_qr_code(message.chat_id)
        time.sleep(2)
        with open(qr_code_path, 'rb') as qr:
            context.bot.send_photo(
                chat_id=message.chat_id,
                photo=qr,
            )
        time.sleep(2)
        return start(update, context)
    else:
        return start(update, context)


def cancel(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    update.message.reply_text(
        '–ú–æ–µ –¥–µ–ª–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å - –í–∞—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
    )
    return ConversationHandler.END


class Command(BaseCommand):
    def handle(self, *args, **options):
        updater = Updater(TG_TOKEN, use_context=True)
        dp = updater.dispatcher

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],

            states={
                STORAGE: [CommandHandler('start', start),
                          MessageHandler(Filters.text, get_storage)],

                CATEGORY: [CommandHandler('start', start),
                           MessageHandler(Filters.text, choose_category)],

                THINGS: [CommandHandler('start', start),
                         MessageHandler(Filters.text, get_things)],

                QUANTITY: [CommandHandler('start', start),
                           MessageHandler(Filters.text, get_quantity)],

                PERIOD: [CommandHandler('start', start),
                         MessageHandler(Filters.text, get_storage_period)],

                CHECK_PERIOD: [CommandHandler('start', start),
                               MessageHandler(Filters.text,
                                              check_storage_period)],

                INITIALS: [CommandHandler('start', start),
                           MessageHandler(Filters.text, get_initials)],

                PASPORT: [CommandHandler('start', start),
                          MessageHandler(Filters.text,
                                         get_user_passport_from_bot)],

                BIRTH: [CommandHandler('start', start),
                        MessageHandler(Filters.text,
                                       get_user_birth_date_from_bot)],

                ORDER: [CommandHandler('start', start),
                        MessageHandler(Filters.text,
                                       create_order)],

                CHECKOUT: [CommandHandler('start', start),
                           MessageHandler(Filters.text,
                                          checkout)],

            },

            fallbacks=[CommandHandler('cancel', cancel)]
        )

        dp.add_handler(conv_handler)

        updater.start_polling()
        updater.idle()
