import logging
import time
from datetime import datetime, timedelta
import telegram
import qrcode

import phonenumbers
from phonenumbers import NumberParseException

from collections import defaultdict
from django.core.management.base import BaseCommand
from django.conf import settings
from agent_bot.models import Profile, Stuff, Stuff_categories, Order, Promo_code

from telegram import ReplyKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO)
logger = logging.getLogger(__name__)

SELECTION, STORAGE, CATEGORY, CELL_SIZE, SELECT_SIZE,SELECT_CELL_SIZE, THINGS, QUANTITY, PERIOD, CHECK_PERIOD, RESERVE, INITIALS, PASPORT, BIRTH, ORDER, CHECKOUT, MENU = range(
    17)

storage_info = defaultdict()

CHECKOUT_URL = 'https://www.tinkoff.ru/kassa/solution/qr/'

TG_TOKEN = settings.BOT_TOKEN

bot = telegram.Bot(token=TG_TOKEN)

address_kb = [
    ['–ü–∏—Ä–æ–≥–æ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è 15 (–º.–ü–ª–æ—â–∞–¥—å –õ–µ–Ω–∏–Ω–∞)'],
    ['–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —à–æ—Å—Å–µ, 25, –∫–æ—Ä–ø. 1–í (–º.–ó–≤–µ–∑–¥–Ω–∞—è)'],
    ['—É–ª. –ö—Ä—ã–ª–µ–Ω–∫–æ, 3–ë ( –º. –£–ª–∏—Ü–∞ –î—ã–±–µ–Ω–∫–æ )'],
    ['–ú—É—Ä–∏–Ω–æ, –í–æ—Ä–æ–Ω—Ü–æ–≤—Å–∫–∏–π –±-—Ä, 3 ( –º. –î–µ–≤—è—Ç–∫–∏–Ω–æ )'],
]
choosing_category_kb = [['—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏', '–¥—Ä—É–≥–æ–µ']]

seasonal_things_kb = [
    ['–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥'],
    ['–≤–µ–ª–æ—Å–∏–ø–µ–¥', '–∫–æ–ª–µ—Å–∞']
]
storage_period_kb = [
    ['1 –Ω–µ–¥–µ–ª—è', '1 –º–µ—Å—è—Ü', '6 –º–µ—Å—è—Ü–µ–≤'],
    ['–º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏'],
    ['–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –º–µ–Ω–µ–µ –ø–æ–ª—É–≥–æ–¥–∞']
]
less_month_storage_period_kb = [
    ['2 –Ω–µ–¥–µ–ª–∏', '3 –Ω–µ–¥–µ–ª–∏'],
    ['–Ω–∞–∑–∞–¥']
]
more_storage_period_kb = [
    ['2 –º–µ—Å—è—Ü–∞', '3 –º–µ—Å—è—Ü–∞'],
    ['4 –º–µ—Å—è—Ü–∞', '5 –º–µ—Å—è—Ü–µ–≤'],
    ['–Ω–∞–∑–∞–¥']
]
tires_storage_period_kb = [
    ['1 –º–µ—Å—è—Ü', '6 –º–µ—Å—è—Ü–µ–≤', '12 –º–µ—Å—è—Ü–µ–≤'],
    ['–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –º–µ–Ω–µ–µ –ø–æ–ª—É–≥–æ–¥–∞'],
    ['–±–æ–ª—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤, –Ω–æ –º–µ–Ω–µ–µ –≥–æ–¥–∞']
]
more_6_months_storage_period_kb = [
    ['7 –º–µ—Å—è—Ü–µ–≤', '8 –º–µ—Å—è—Ü–µ–≤'],
    ['9 –º–µ—Å—è—Ü–µ–≤','10 –º–µ—Å—è—Ü–µ–≤'],
    ['11 –º–µ—Å—è—Ü–µ–≤'],
    ['–Ω–∞–∑–∞–¥']
]
byu_or_menu_kb = [['–û–ø–ª–∞—Ç–∏—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

reserve_kb = [['–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

your_orders_kb = [['–ú–æ–∏ —è—á–µ–π–∫–∏', '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —è—á–µ–π–∫—É']]

new_order_kb = [['–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —è—á–µ–π–∫—É']]

other_things_kb = [
    ['1', '2', '3', '4', '5'],
    ['6', '7', '8', '9', '10']
]

menu_kb = [['–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]

address = ReplyKeyboardMarkup(
    address_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)

choosing_category = ReplyKeyboardMarkup(
    choosing_category_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
seasonal_things = ReplyKeyboardMarkup(
    seasonal_things_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
storage_period = ReplyKeyboardMarkup(
    storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
more_storage_period = ReplyKeyboardMarkup(
    more_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
more_6_months_storage_period = ReplyKeyboardMarkup(
    more_6_months_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
less_month_storage_period = ReplyKeyboardMarkup(
    less_month_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
tires_storage_period = ReplyKeyboardMarkup(
    tires_storage_period_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)

byu_or_menu = ReplyKeyboardMarkup(
    byu_or_menu_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
reserve = ReplyKeyboardMarkup(
    reserve_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
your_orders = ReplyKeyboardMarkup(
    your_orders_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
new_order = ReplyKeyboardMarkup(
    new_order_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
other_things = ReplyKeyboardMarkup(
    other_things_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)
menu = ReplyKeyboardMarkup(
    menu_kb,
    resize_keyboard=True,
    one_time_keyboard=True
)


def is_valid_fio(fio):
    fio_splitted = fio.split()
    if len(fio_splitted) != 3:
        return False
    elif all([fio_item.isalpha() for fio_item in fio_splitted]):
        return True
    else:
        return False


def is_valid_phone(phonenumber):
    try:
        number = phonenumbers.parse(phonenumber, 'RU')
        if phonenumbers.is_valid_number(number):
            phone = phonenumbers.format_number(
                number,
                phonenumbers.PhoneNumberFormat.E164
            )
            return True
    except NumberParseException:
        return False


def is_valid_passport(passport):
    passport_splitted = passport.split()
    if len(passport_splitted) != 2:
        return False
    series, num = passport_splitted
    if not all([series.isdigit(), num.isdigit()]):
        return False
    elif len(series) == 4 and len(num) == 6:
        return True
    else:
        return False


def is_valid_birth_date(birth_date):
    try:
        datetime.strptime(birth_date, '%Y-%m-%d')
        return True
    except Exception:
        return False


def get_qr_code(chat_id):
    img = qrcode.make(chat_id)
    img.save(f'{chat_id}.png')
    return f'{chat_id}.png'


def get_storage_interval_timedelta(period):
    amount, interval = period.split()
    if interval.startswith('–Ω'):
        days = 7 * int(amount)
        delta = timedelta(days=days)
        return delta
    elif interval.startswith('–º'):
        days = 30 * int(amount)
        delta = timedelta(days=days)
        return delta


def get_user_data_from_db(update):
    try:
        message = update.message
        user_id = message.chat_id
        existing_user = Profile.objects.get(tg_chat_id=user_id)
        if existing_user:
            return True
    except:
        return False


def is_orders(update):
    try:
        message = update.message
        user_id = message.chat_id
        if {Order.objects.filter(profile__tg_chat_id__contains=user_id)}:
            return your_orders
        else:
            return new_order
    except:
        return new_order


def start(update, context):
    time.sleep(0.5)
    message = update.message
    user_name = message.chat.first_name
    user_info = get_user_data_from_db(update)
    if not user_info:
        text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n' \
               '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –ª–∏—á–Ω—É—é —è—á–µ–π–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.' \
               '–î–∞–≤–∞–π—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–∏–º –∞–¥—Ä–µ—Å–∞ —Å–∫–ª–∞–¥–æ–≤, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–π!'
        update.message.reply_text(text)
        time.sleep(1)
        reply_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.'
        update.message.reply_text(reply_text, reply_markup=address)
        time.sleep(0.2)
        return STORAGE
    else:
        text = f'–ü—Ä–∏–≤–µ—Ç, {user_name}.ü§ö\n\n' \
               '–í—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—á–µ–π–∫—É, –ª–∏–±–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É–∂–µ –∞—Ä–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ.'
        update.message.reply_text(text)
        time.sleep(1)
        reply_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'
        actual_buttons = is_orders(update)
        update.message.reply_text(reply_text, reply_markup=actual_buttons)
        time.sleep(0.2)
        return SELECTION


def get_selection_old_user(update, context):
    message = update.message
    selection = message.text
    user_id = message.chat_id
    if selection == '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —è—á–µ–π–∫—É':
        reply_text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–ª–∞–¥, –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—â–µ–π.'
        update.message.reply_text(reply_text, reply_markup=address)
        time.sleep(0.2)
        return STORAGE
    else:
        user_orders = Order.objects.filter(profile__tg_chat_id__contains=user_id)
        orders_info = []
        for order in user_orders:
            orders_info.append(f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order.order_number}, —Ö—Ä–∞–Ω–µ–Ω–∏–µ {order.things} c {order.start_date} –ø–æ {order.end_date} –ø–æ –∞–¥—Ä–µ—Å—É {order.storage_address}')
        update.message.reply_text(
            f'–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n {orders_info}')
        reply_text = '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —è—á–µ–π–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.'
        update.message.reply_text(reply_text, reply_markup=new_order)
        time.sleep(0.2)


def get_storage(update, context):
    message = update.message
    user_id = message.chat_id
    storage_info[user_id] = {}
    address = message.text
    storage_info[user_id]['address'] = address
    reply_text = '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ö—Ä–∞–Ω–∏—Ç—å?'
    update.message.reply_text(reply_text, reply_markup=choosing_category)
    return CATEGORY


def choose_category(update, context):
    message = update.message
    user_id = message.chat_id

    storage_type = message.text
    storage_info[user_id]['storage_type'] = storage_type
    if storage_type == '–¥—Ä—É–≥–æ–µ':
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ø–ª–æ—â–∞–¥—å —è—á–µ–π–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è\n' \
               '–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä –æ—Ç 1 –¥–æ 10 –º2'
        update.message.reply_text(text, reply_markup=other_things)
        return CELL_SIZE

    if storage_type == '—Å–µ–∑–æ–Ω–Ω—ã–µ –≤–µ—â–∏':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ –≤–µ—â–∏.'
        update.message.reply_text(reply_text, reply_markup=seasonal_things)
        return THINGS


def select_storage_cell_size(update, context):
    message = update.message
    user_id = message.chat_id
    cell_size = int(message.text)
    if cell_size in range(1, 11):
        price = 599 + 150 * (cell_size - 1)
        storage_info[user_id]['cell_size'] = cell_size
        text = f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–∞–≤–∏—Ç {price} —Ä—É–±–ª–µ–π\n' \
               f'–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è'
        update.message.reply_text(
            text,
            reply_markup=tires_storage_period,
        )
        return SELECT_SIZE



def get_other_storage_cell_size(update, context):
    message = update.message
    user_id = message.chat_id
    select = message.text
    if select =='–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –º–µ–Ω–µ–µ –ø–æ–ª—É–≥–æ–¥–∞':
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ.', reply_markup=more_storage_period)
        return SELECT_CELL_SIZE

    if select == '–±–æ–ª—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤, –Ω–æ –º–µ–Ω–µ–µ –≥–æ–¥–∞':
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ.', reply_markup=more_6_months_storage_period)
        return SELECT_CELL_SIZE

    else:
        storage_info[user_id]['storage_period'] = select
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É.',
            reply_markup=reserve)
        return RESERVE



def get_select_storage_cell_size(update, context):
    message = update.message
    user_id = message.chat_id
    select = message.text
    if select=='–Ω–∞–∑–∞–¥':
        text='–ü—Ä–∏–Ω—è—Ç–æ.'
        update.message.reply_text(
            text,
            reply_markup=tires_storage_period,
        )
        print('–ø—Ä–∏–Ω—è—Ç–æ')
        return SELECT_SIZE
    else:
        storage_info[user_id]['storage_period'] = select
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É.',
            reply_markup=reserve)
        return RESERVE


def get_things(update, context):
    message = update.message
    user_id = message.chat_id
    things = message.text
    storage_info[user_id]['things'] = things
    update.message.reply_text('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ.')
    return QUANTITY


def get_quantity(update, context):
    message = update.message
    user_id = message.chat_id
    number_things = message.text
    if number_things.isdigit() and int(number_things) < 100:
        storage_info[user_id]['number_things'] = number_things
        time.sleep(0.3)
        things = storage_info[user_id].get('things')
        price_per_week = Stuff.objects.get(stuff_name=things).price_per_week
        price_per_month = Stuff.objects.get(stuff_name=things).price_per_month
        if things in ('–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥'):
            reply_text = f'–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è {things}.\n –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è {number_things} –µ–¥. –≤ –Ω–µ–¥–µ–ª—é {price_per_week*int(number_things)}, –≤ –º–µ—Å—è—Ü {price_per_month*int(number_things)}.'
            update.message.reply_text(reply_text, reply_markup=storage_period)
            return PERIOD
        if things == '–∫–æ–ª–µ—Å–∞':
            reply_text = f'–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è {things}.\n –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è {number_things} –µ–¥. –≤ –º–µ—Å—è—Ü {price_per_month*int(number_things)}.'
            update.message.reply_text(
                reply_text,
                reply_markup=tires_storage_period
            )
            return PERIOD

    else:
        update.message.reply_text('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞.')


def get_storage_period(update, context):
    message = update.message
    user_id = message.chat_id
    storage_period = message.text
    if storage_period == '–±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –º–µ–Ω–µ–µ –ø–æ–ª—É–≥–æ–¥–∞':
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ.', reply_markup=more_storage_period)
        return CHECK_PERIOD
    if storage_period == '–º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏':
        update.message.reply_text('–ü—Ä–∏–Ω—è—Ç–æ.', reply_markup=less_month_storage_period)
        return CHECK_PERIOD

    else:
        storage_info[user_id]['storage_period'] = storage_period
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É.',
            reply_markup=reserve)
        return RESERVE


def reserve_cell(update, context):
    message = update.message
    storage_period = message.text

    if storage_period == '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å':
        user_info = get_user_data_from_db(update)
        if not user_info:
            update.message.reply_text(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
            )
            return INITIALS
        else:
            update.message.reply_text(
                f'–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ.',
                reply_markup=byu_or_menu
            )
        return CHECKOUT
    else:
        return start(update, context)


def check_storage_period(update, context):
    message = update.message
    user_id = message.chat_id
    user_message = message.text
    things = storage_info[user_id].get('things')

    if things in ('–ª—ã–∂–∏', '—Å–Ω–æ—É–±–æ—Ä–¥', '–≤–µ–ª–æ—Å–∏–ø–µ–¥') and user_message == '–Ω–∞–∑–∞–¥':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
        update.message.reply_text(reply_text, reply_markup=storage_period)
        return PERIOD
    if things == '–∫–æ–ª–µ—Å–∞' and user_message == '–Ω–∞–∑–∞–¥':
        reply_text = '–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è.'
        update.message.reply_text(
            reply_text,
            reply_markup=tires_storage_period
        )
        return PERIOD
    else:
        storage_info[user_id]['storage_period'] = user_message
        update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —è—á–µ–π–∫—É.',
            reply_markup=reserve)
        return RESERVE


def get_initials(update, context):
    user_message = update.message.text
    message = update.message
    fio = message.text
    if is_valid_fio(user_message):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000'
        )
        storage_info[message.chat_id]['fio'] = fio
        return PASPORT
    else:
        update.message.reply_text(
            '–§–ò–û –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
        )


def get_user_passport_from_bot(update, context):
    message = update.message
    phone = message.text
    if is_valid_phone(phone):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞–µ—Ç–µ –°–ï–†–ò–Ø –ù–û–ú–ï–†\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 8805 777666',
        )
        storage_info[message.chat_id]['phone'] = phone
        return BIRTH
    else:
        update.message.reply_text(
            '–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 79260000000 ',
        )


def get_user_birth_date_from_bot(update, context):
    message = update.message
    passport = message.text
    if is_valid_passport(passport):
        update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–µ—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
        )
        storage_info[message.chat_id]['passport'] = passport
        return ORDER
    else:
        update.message.reply_text(
            '–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –°–ï–†–ò–Ø –ù–û–ú–ï–†',
        )

def save_user_to_db(update, context):
    message = update.message
    user_id = message.chat_id
    user, _ = Profile.objects.get_or_create(tg_chat_id=user_id)
    user.full_name = storage_info[user_id].get('fio')
    user.tg_chat_id = user_id
    user.phone = storage_info[user_id].get('phone')
    user.passport_date = storage_info[user_id].get('passport')
    user.birthdate =  storage_info[user_id].get('birth_date')
    user.save()


def create_order(update, context):
    message = update.message
    birth_date = message.text
    user_id = message.chat_id
    storage_type = storage_info[user_id]['storage_type']
    address = storage_info[user_id]['address']
    period = storage_info[user_id]['storage_period']
    fio = storage_info[message.chat_id]['fio']
    passport = storage_info[message.chat_id]['passport']
    phone = storage_info[message.chat_id]['phone']
    things = storage_info[user_id].get('things')
    if is_valid_birth_date(birth_date):
        storage_info[user_id]['birth_date'] = birth_date
        if not things:
            things = ''
        update.message.reply_text(
            f'–û—Ç–ª–∏—á–Ω–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç –≤–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n–§–ò–û: {fio}\n–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {passport}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–ê–¥—Ä–µ—Å —Ö—Ä–∞–Ω–µ–Ω–∏—è: {address}\n–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è: {storage_type}\n–í–µ—â—å: {things}\n–ü–µ—Ä–∏–æ–¥ —Ö—Ä–∞–Ω–µ–Ω–∏—è: {period}',
            reply_markup=byu_or_menu
        )
        return CHECKOUT
    else:
        update.message.reply_text(
            '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –ì–û–î-–ú–ï–°–Ø–¶-–ß–ò–°–õ–û\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 1991-08-17',
        )
def get_things_price(period, number_things, things_weekly_price, things_monthly_price):
    amount, interval = period.split()
    if interval.startswith('–Ω'):
        all_price = int(amount) * int(number_things) * int(things_weekly_price)
        return all_price
    else:
        all_price = int(amount) * int(number_things) * int(things_monthly_price)
        return all_price

def save_order_to_db(update, context, qr_code_path, time_from, time_to, all_price):
    message = update.message
    user_id = message.chat_id
    address = storage_info[user_id]['address']
    things = storage_info[user_id].get('things')
    try:
        order_number = Order.objects.latest('order_number').order_number + 1
    except Order.DoesNotExist:
        order_number = 1
    if things:
        order = Order.objects.create(
            order_number=order_number,
            profile = Profile.objects.get(tg_chat_id=user_id),
            order_price=all_price,
            start_date = time_from,
            end_date = time_to,
            things = things,
            storage_address =  address,
            qr_code = qr_code_path,
        )
        order.save
    else:
        order = Order.objects.create(
            order_number=order_number,
            profile=Profile.objects.get(tg_chat_id=user_id),
            order_price=1000,
            start_date=time_from,
            end_date=time_to,
            storage_address=address,
            qr_code=qr_code_path,
        )
        order.save

def checkout(update, context):
    message = update.message
    choice = message.text
    user_id = message.chat_id
    if choice == '–û–ø–ª–∞—Ç–∏—Ç—å':
        storage_period = storage_info[user_id]['storage_period']
        address = storage_info[user_id].get('address')
        number_things = storage_info[user_id].get('number_things')
        things = storage_info[user_id].get('things')
        period = storage_info[user_id].get('storage_period')
        if things:
            things_weekly_price = Stuff.objects.get(stuff_name=things).price_per_week
            things_monthly_price = Stuff.objects.get(stuff_name=things).price_per_month
            all_price = get_things_price(period, number_things, things_weekly_price, things_monthly_price)
        update.message.reply_text(
            f'–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É {CHECKOUT_URL}'
        )
        qr_code_path = get_qr_code(message.chat_id)
        time.sleep(2)
        with open(qr_code_path, 'rb') as qr:
            context.bot.send_photo(
                chat_id=message.chat_id,
                photo=qr,
            )
        time.sleep(2)
        period = storage_info[message.chat_id]['storage_period']
        time_from = datetime.now()
        time_to = time_from + get_storage_interval_timedelta(period)
        if get_user_data_from_db(update):
            save_order_to_db(update, context, qr_code_path, time_from, time_to, all_price)
        else:
            save_user_to_db(update, context)
            save_order_to_db(update, context, qr_code_path, time_from, time_to, all_price)
        update.message.reply_text(
            '–í–æ—Ç –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É –ª–∏—á–Ω–æ–º—É —Å–∫–ª–∞–¥—É.'
            f'–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Å–∫–ª–∞–¥ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–∏–æ–¥ —Å {time_from.date()} –ø–æ {time_to.date()}',
        )
        text='–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.'
        update.message.reply_text(text, reply_markup=menu)
        return MENU
    else:
        return start(update, context)

def get_menu(update, context):
    message = update.message
    menu = message.text
    if menu =='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return start(update, context)

def cancel(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)
    update.message.reply_text(
        '–ú–æ–µ –¥–µ–ª–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å - –í–∞—à–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è'
    )
    return ConversationHandler.END


class Command(BaseCommand):
    def handle(self, *args, **options):
        updater = Updater(TG_TOKEN, use_context=True)
        dp = updater.dispatcher

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],

            states={

                SELECTION: [CommandHandler('start', start),
                            MessageHandler(Filters.text,
                                           get_selection_old_user)],

                STORAGE: [CommandHandler('start', start),
                          MessageHandler(Filters.text, get_storage)],

                CATEGORY: [CommandHandler('start', start),
                           MessageHandler(Filters.text, choose_category)],

                CELL_SIZE: [CommandHandler('start', start),
                            MessageHandler(Filters.text,
                                           select_storage_cell_size)],

                SELECT_SIZE: [CommandHandler('start', start),
                              MessageHandler(Filters.text,
                                             get_other_storage_cell_size)],
                SELECT_CELL_SIZE: [CommandHandler('start', start),
                              MessageHandler(Filters.text,
                                             get_select_storage_cell_size)],

                THINGS: [CommandHandler('start', start),
                         MessageHandler(Filters.text, get_things)],

                QUANTITY: [CommandHandler('start', start),
                           MessageHandler(Filters.text, get_quantity)],

                PERIOD: [CommandHandler('start', start),
                         MessageHandler(Filters.text, get_storage_period)],

                CHECK_PERIOD: [CommandHandler('start', start),
                               MessageHandler(Filters.text,
                                              check_storage_period)],
                RESERVE: [CommandHandler('start', start),
                          MessageHandler(Filters.text,
                                         reserve_cell)],

                INITIALS: [CommandHandler('start', start),
                           MessageHandler(Filters.text, get_initials)],

                PASPORT: [CommandHandler('start', start),
                          MessageHandler(Filters.text,
                                         get_user_passport_from_bot)],

                BIRTH: [CommandHandler('start', start),
                        MessageHandler(Filters.text,
                                       get_user_birth_date_from_bot)],

                ORDER: [CommandHandler('start', start),
                        MessageHandler(Filters.text,
                                       create_order)],

                CHECKOUT: [CommandHandler('start', start),
                           MessageHandler(Filters.text,
                                          checkout)],
                MENU: [CommandHandler('start', start),
                           MessageHandler(Filters.text,
                                          get_menu)],

            },

            fallbacks=[CommandHandler('cancel', cancel)]
        )

        dp.add_handler(conv_handler)

        updater.start_polling()
        updater.idle()